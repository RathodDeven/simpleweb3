{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","provider","WalletConnectProvider","infuraId","useState","account","setAccount","getProviderEnable","a","enable","web3","Web3","console","log","eth","getAccounts","accounts","on","chainId","code","reason","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2fAmDeA,MA/Cf,WACE,IAAMC,EAAW,IAAIC,IAAsB,CACzCC,SAAU,qCAFC,EASgBC,mBAAS,MATzB,mBASNC,EATM,KASEC,EATF,KAWPC,EAAiB,uCAAG,8BAAAC,EAAA,sEAClBP,EAASQ,SADS,cAElBC,EAAO,IAAIC,IAAKV,GACtBW,QAAQC,IAAIH,GAHY,SAIDA,EAAKI,IAAIC,cAJR,OAIlBC,EAJkB,OAMxBJ,QAAQC,IAAIG,GACZV,EAAWU,EAAS,IAEtBf,EAASgB,GAAG,mBAAmB,SAACD,GAC9BJ,QAAQC,IAAIG,MAIdf,EAASgB,GAAG,gBAAgB,SAACC,GAC3BN,QAAQC,IAAIK,MAIdjB,EAASgB,GAAG,WAAW,WACrBL,QAAQC,IAAI,cAIdZ,EAASgB,GAAG,cAAc,SAACE,EAAMC,GAC/BR,QAAQC,IAAIM,EAAMC,MAzBM,4CAAH,qDA4BvB,OACE,gCACE,wBAAQC,QAASd,EAAjB,sBACCF,GAAW,6CAAgBA,SClCnBiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.847a454c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Web3 from \"web3\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n\nfunction App() {\n  const provider = new WalletConnectProvider({\n    infuraId: \"12c6b7cde8a74882bb675653d166a2bf\", // Required\n  });\n  \n  //  Enable session (triggers QR Code modal)\n  \n  \n  //  Create Web3\n  const [account,setAccount] = useState(null);\n\n  const getProviderEnable = async () => {\n    await provider.enable();\n    const web3 = new Web3(provider);\n    console.log(web3);\n    const accounts = await web3.eth.getAccounts();\n\n    console.log(accounts);\n    setAccount(accounts[0]);\n    // Subscribe to accounts change\n  provider.on(\"accountsChanged\", (accounts) => {\n    console.log(accounts);\n  });\n\n  // Subscribe to chainId change\n  provider.on(\"chainChanged\", (chainId) => {\n    console.log(chainId);\n  });\n\n  // Subscribe to session connection\n  provider.on(\"connect\", () => {\n    console.log(\"connect\");\n  });\n\n  // Subscribe to session disconnection\n  provider.on(\"disconnect\", (code, reason) => {\n    console.log(code, reason);\n  });\n  }\n  return (\n    <div>\n      <button onClick={getProviderEnable}>Activate</button>\n      {account && <div>Account : {account}</div>}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}